package com.jtouzy.cv.tools.executors.dbgen;

import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.common.collect.Lists;
import com.jtouzy.cv.tools.errors.ToolsException;
import com.jtouzy.cv.tools.model.ToolExecutorImpl;
import com.jtouzy.dao.db.DBType;
import com.jtouzy.dao.model.ColumnContext;
import com.jtouzy.dao.model.ModelContext;
import com.jtouzy.dao.model.TableContext;

public class DBGenerateTool extends ToolExecutorImpl {
	private static final Logger logger = LogManager.getLogger(DBGenerateTool.class);
	
	public DBGenerateTool() {
	}
	
	@Override
	public void execute() {
		initializeContext();
		createAllTables();
	}
	
	public void createAllTables() {
		try {
			Set<TableContext> contexts = ModelContext.getAllTableContexts();
			for (TableContext tableContext : contexts) {
				createTable(tableContext.getTableClass());
			}
		} catch (SQLException ex) {
			throw new ToolsException(ex);
		}
	}
	
	public void createTable(Class<?> clazz)
	throws SQLException {
		final StringBuilder crt = new StringBuilder();
		final StringBuilder sql = new StringBuilder();
		TableContext tableContext = ModelContext.getTableContext(clazz);
		Collection<ColumnContext> fields = tableContext.getColumns().values();
		final Collection<ColumnContext> idFields = new ArrayList<>();
		final Collection<ColumnContext> relationFields = new ArrayList<>();
		crt.append("drop table if exists ")
		   .append(tableContext.getName())
		   .append(";").append("\n");
		sql.append("create table ")
		   .append(tableContext.getName())
		   .append(" (").append("\n");
		fields.stream().forEach(f -> {
			sql.append("\t")
			   .append(f.getName())
			   .append(" ");
			if (f.getType() == DBType.ENUM) {
				StringBuilder typeName = new StringBuilder();
				typeName.append(tableContext.getName())
				        .append("_")
				        .append(f.getName());
				crt.append("drop type if exists ")
				   .append(typeName)
				   .append(";").append("\n");
				crt.append("create type ")
				   .append(typeName)
				   .append(" as enum ")
				   .append("(")
				   .append(Lists.newArrayList(f.getFieldContext().getField().getType().getEnumConstants())
						        .stream()
						        .map(ec -> {
						        	return new StringBuilder("'").append(ec.toString()).append("'");
						        })
						        .collect(Collectors.joining(",")))
				   .append(");").append("\n");
				sql.append(typeName);
			} else {
				sql.append(f.getType().getSqlSyntax());
			}
			if (f.getType().isLengthSensitive()) {
				sql.append("(")
				   .append(f.getLength())
				   .append(")");
			}
			if (f.isIdentifier()) {
				idFields.add(f);
				if (f.isAutoGenerated()) {
					crt.append("drop sequence if exists ")
					   .append(tableContext.getName())
					   .append("_id;").append("\n");
					crt.append("create sequence ")
					   .append(tableContext.getName())
					   .append("_id start 1;").append("\n");
					sql.append(" default nextval('")
					   .append(tableContext.getName())
					   .append("_id')");
				}
			} 
			if (f.isRequired()) {
				sql.append(" not null");
			}
			if (f.isRelationColumn()) {
				relationFields.add(f);
			}
			sql.append(",").append("\n");
		});
		sql.append("\t")
		   .append("unique (")
		   .append(idFields.stream()
		                   .map(f -> f.getName())
		                   .collect(Collectors.joining(",")))
		   .append(")");
		crt.append(sql)
		   .append("\n")
		   .append(");")
		   .append("\n")
		   .append("grant select on ")
		   .append(tableContext.getName())
		   .append(" to upublic;");
		logger.trace(crt);
		
		if (connection != null) {
			try (Statement stmt = connection.createStatement()) {
				stmt.execute(crt.toString());
			}
		}
	}
}
